package theory_40.equals_hashcode;

public class Main {
    public static void main(String[] args) {
        Order o1 = new Order(1, "order1");
        Order o2 = new Order(1, "order1");
        Order o3 = new Order(1, "order2");

        System.out.println(o1 == o2);
        System.out.println(o1.equals(o2));
        System.out.println(o1.equals(o3));
        System.out.println(o1.hashCode());

    }
        /*
    equals() contract
    1. reflexive - обьект должен быть равен самому себе
    2. symmetric -  x.equals(y) должен возвращать тот же результат что и y.equals(x)
    3. transitive - если x.equals(y) и y.equals(z) то  x.equals(z)
    4. consistent - значение equals()  может меняться только если  изменяться значения содержащиеся  в нем


    HashCode
    хешкод - это целое число, которое генерируется с помощью алгоритма хеширования

    hashCode() contract

    1. При вызове на одном и том же обьекте несколько раз во время выполнения программы hashCode()  должен возвращаать
        одно и тоже значение, при условии что значения полей не менялись. При этом само значение не обязательно
        должно оставаться неизменным при нескольких вызовах программы
    2. Если два обьекта равны в соотвтествии с equals(),  то их хешкоды так же должны быть одинаковы.
    3. Если два обьекта не равны по equals()  то вызов метода hashCode()  для них не обязательно должен давать
        разные значения


         Бинарные деревья

         Структура данных, которая состоит из узлов и строится по следующим правилам:
         1. Каждый узел имеет не более двух детей
         2. Каждое значение меньшее значения узла станет левым ребенком или ребенком левого ребенка
         3. Каждое значение большее или равное значению узла станет правым ребенком или ребенком правого ребенка
     */
}
